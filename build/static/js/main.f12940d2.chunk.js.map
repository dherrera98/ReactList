{"version":3,"sources":["components/NavBar.jsx","pages/Index.jsx","plugin/graphql.js","components/ListTask.jsx","pages/TodoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["NavBar","className","role","aria-label","to","exact","src","alt","aria-expanded","data-target","aria-hidden","id","activeClassName","$navbarBurgers","Array","prototype","slice","call","document","querySelectorAll","length","forEach","el","addEventListener","target","dataset","$target","getElementById","classList","toggle","Component","Index","uri","ListTask","props","remove","removeTask","gql","ApolloClient","mutate","mutation","variables","then","res","position","tasks","findIndex","x","actionRemove","toast","message","type","catch","err","completed","completedTask","term","taskCompleted","undefined","task","nowIsCompleted","actionUpdate","getFullDate","dateTask","date","Date","getDay","getMonth","getFullYear","getHours","getMinutes","this","map","key","name","onClick","createTo","TodoList","addTask","event","state","tarea","client","addTaskQuery","setState","concat","data","insert_tasks","returning","value","reloadTask","query","result","loaded","array","splice","updateTask","newTasks","placeholder","onKeyDown","onChange","elem","disabled","setInterval","App","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","ReactDOM","render","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f12940d2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {Link, NavLink} from 'react-router-dom'\r\nimport \"bulma/css/bulma.min.css\"\r\nimport \"../shared.css\"\r\n\r\nexport default class NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\r\n                <div className=\"navbar-brand\">\r\n                    <Link className=\"navbar-item\" to=\"/\" exact=\"true\">\r\n                        <img src=\"https://avatars2.githubusercontent.com/u/39895671?s=400&v=4\" alt=\"logo\" className=\"logo\"/>\r\n                        <h1>ReactList</h1>\r\n                    </Link>\r\n\r\n                    <a role=\"button\" className=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navMenu\">\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                    </a>\r\n                </div>\r\n\r\n                <div id=\"navMenu\" className=\"navbar-menu\">\r\n                    <div className=\"navbar-start\">\r\n                    <NavLink to=\"/\" exact=\"true\" className=\"navbar-item\" activeClassName=\"activo\">Home</NavLink>\r\n                    <NavLink to=\"/todolist/\" exact=\"true\" className=\"navbar-item\" activeClassName=\"activo\">Todolist</NavLink>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        // Get all \"navbar-burger\" elements\r\n        const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);\r\n      \r\n        // Check if there are any navbar burgers\r\n        if ($navbarBurgers.length > 0) {\r\n      \r\n          // Add a click event on each of them\r\n          $navbarBurgers.forEach( el => {\r\n            el.addEventListener('click', () => {\r\n              // Get the target from the \"data-target\" attribute\r\n              const target = el.dataset.target;\r\n              const $target = document.getElementById(target);\r\n              // Toggle the \"is-active\" class on both the \"navbar-burger\" and the \"navbar-menu\"\r\n              el.classList.toggle('is-active');\r\n              $target.classList.toggle('is-active');\r\n      \r\n            });\r\n          });\r\n        }\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom' \r\n\r\nexport default class Index extends Component {\r\n    render() {\r\n        return (\r\n            <section className=\"hero is-light\">\r\n            <div className=\"hero-body\">\r\n                <div className=\"container\">\r\n                <h1 className=\"title\">\r\n                    Index\r\n                </h1>\r\n                <h2 className=\"subtitle\">\r\n                    React + Hasura = ReactList ❤️\r\n                </h2>\r\n                <Link className=\"button is-link is-outlined\" to=\"/todoList\">Go to Todolist!</Link>\r\n                </div>\r\n            </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","export let uri = 'https://todolist-engine.herokuapp.com/v1/graphql'","import React, { Component } from 'react'\r\nimport ApolloClient from 'apollo-boost';\r\nimport { gql } from \"apollo-boost\";\r\nimport \"../shared.css\"\r\nimport { toast } from \"bulma-toast\";\r\nimport { uri } from \"../plugin/graphql\"\r\n\r\n\r\n\r\nexport default class ListTask extends Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    remove = (id) => {\r\n        const removeTask = gql`\r\n            mutation removeTask($id: Int){\r\n            update_tasks(where: {id: {_eq: $id}}, _set: {active: false}) {\r\n                returning {\r\n                id\r\n                name\r\n                completed\r\n                createTo\r\n                active\r\n                }\r\n            }\r\n        }\r\n\r\n        `\r\n\r\n        var client = new ApolloClient({\r\n            uri,\r\n        });\r\n\r\n        client.mutate({\r\n            mutation: removeTask, \r\n            variables: {\r\n            id\r\n        }}).then(res => {\r\n            const position = this.props.tasks.findIndex(x => x.id === id);\r\n            this.props.actionRemove(position)\r\n            toast({message: \"Successfully removed\", type: \"is-warning\"})\r\n        }).catch(err =>{\r\n            toast({message: \"Error removing\", type: \"is-danger\"})\r\n        })\r\n    }\r\n\r\n    completed = (id) => {\r\n        const completedTask = gql `\r\n        mutation complete_task($term: Boolean, $id: Int){\r\n            update_tasks(where: {id: {_eq: $id}}, _set: {completed: $term}) {\r\n                returning {\r\n                id\r\n                name\r\n                completed\r\n                }\r\n            }\r\n            }\r\n\r\n        `\r\n\r\n        var client = new ApolloClient({\r\n            uri,\r\n        });\r\n\r\n\r\n        const nowIsCompleted = (id)=> {\r\n            var taskCompleted = undefined;\r\n\r\n            this.props.tasks.forEach(task => {\r\n                \r\n                if(task.id === id){\r\n                    taskCompleted = task.completed\r\n                }\r\n            });\r\n\r\n            return !taskCompleted;\r\n        }\r\n\r\n\r\n        client.mutate({\r\n            mutation: completedTask,\r\n            variables:{\r\n                id: id,\r\n                term: nowIsCompleted(id)\r\n            }\r\n        }).then(res => {\r\n            const position = this.props.tasks.findIndex(x => x.id === id);\r\n            this.props.actionUpdate(position)\r\n            toast({message: \"Successfully modified\", type: \"is-success\"})\r\n        }).catch(err =>{\r\n            toast({message: \"Error modified\", type: \"is-danger\"})\r\n        })\r\n        \r\n    }\r\n\r\n    getFullDate = (dateTask) => {\r\n        let date = new Date(dateTask)\r\n        let dateFormat = date.getDay() + \"/\" + date.getMonth() + \"/\" + date.getFullYear() + \"  -  \" + date.getHours() + \":\" + date.getMinutes();\r\n        return dateFormat\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div className=\"panel list-group columns list-container\">\r\n              {this.props.tasks.map(task=>(\r\n                    <a key={task.id} className=\"panel-block list-group-item is-primary item item_a\">\r\n                        <span className={task.completed ? \"completed\" : \"\"}>\r\n                            {task.name} \r\n                        </span>\r\n                        <div>\r\n                            {\r\n                                task.completed ?  \r\n                                (<button className=\"button is-info is-outlined is-small\" onClick={() => {this.completed(task.id)}}>Incompleted</button>)\r\n                                :\r\n                                (<button className=\"button is-primary is-outlined is-small\" onClick={() => {this.completed(task.id)}}>Completed</button>)\r\n                            }\r\n\r\n                            <button className=\"button is-danger is-outlined is-small\" onClick={() => {this.remove(task.id)}}>Remove</button>\r\n                        </div>\r\n                        <span className=\"date\">{this.getFullDate(task.createTo)}</span>\r\n\r\n                    </a>\r\n              ))}\r\n          </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport \"./TodoList.css\"\r\nimport ListTask from '../components/ListTask';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { gql } from \"apollo-boost\";\r\nimport \"../shared.css\"\r\nimport { toast } from \"bulma-toast\";\r\nimport { uri } from \"../plugin/graphql\"\r\n\r\n\r\nexport default class TodoList extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            tasks: [],\r\n            tarea: \"\",\r\n            loaded: false\r\n        }\r\n    }\r\n\r\n    addTask = event =>{\r\n\r\n        if(this.state.tarea !== \"\"){\r\n            if(event.key === \"Enter\" || event.key === undefined ){\r\n                var client = new ApolloClient({\r\n                    uri,\r\n                });\r\n    \r\n                const addTaskQuery = gql `mutation insert_tasks($name: String){\r\n                    insert_tasks(objects: {name: $name}) {\r\n                        returning {\r\n                        id\r\n                        name\r\n                        createTo\r\n                        }\r\n                    }\r\n                    }`\r\n    \r\n                client.mutate({mutation: addTaskQuery,\r\n                     variables:{name: this.state.tarea}})\r\n                     .then(res => {\r\n                        this.setState({\r\n                           tasks: this.state.tasks.concat(res.data.insert_tasks.returning),\r\n                           tarea: \"\"\r\n                        })\r\n    \r\n                        document.getElementById(\"inputNewTarea\").value = \"\"\r\n\r\n                        toast({message: \"Added successfully\", type: \"is-success\"})\r\n                        })\r\n                        .catch(err => {\r\n                            toast({message: \"Error adding\", type: \"is-danger\"})\r\n\r\n                        })\r\n            }\r\n        }\r\n    }\r\n\r\n    reloadTask = () => {        \r\n        const client = new ApolloClient({\r\n            uri,\r\n          });\r\n\r\n\r\n        client.query({query: gql`{  \r\n            tasks(order_by: {createTo: asc}, where: {active: {_eq: true}}) {\r\n                id\r\n                name\r\n                completed\r\n                createTo\r\n            }\r\n          }`}).then(result=>{\r\n            this.setState({\r\n                loaded: true\r\n            })\r\n            if(this.state.tasks.length !== result.data.tasks.length){\r\n                this.setState({tasks: []})\r\n                this.setState({tasks: this.state.tasks.concat(result.data.tasks)})\r\n            }\r\n            }).catch(err => {\r\n                toast({message: \"Error taking data\", type: \"is-danger\"})                \r\n            })\r\n\r\n    }\r\n\r\n    removeTask = (position) => {\r\n        const array = [...this.state.tasks]\r\n        array.splice(position, 1)\r\n\r\n        this.setState({\r\n            tasks: array\r\n        })\r\n    }\r\n\r\n    updateTask = (position) => {\r\n        let newTasks = [...this.state.tasks]\r\n        newTasks[position].completed = !newTasks[position].completed\r\n\r\n        this.setState({\r\n            tasks: newTasks\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"columns h1-container\">\r\n                    <h1>TodoList</h1>\r\n                </div>\r\n                \r\n                {this.state.loaded ? (\r\n                    <>\r\n                        <div className=\"columns newtask\">\r\n                            <input className=\"input\" type=\"text\" placeholder=\"Introduce taréa\" onKeyDown={this.addTask} id=\"inputNewTarea\" onChange={(elem)=>{this.setState({tarea: elem.target.value})}}/>\r\n                            <a className=\"button is-link\" onClick={this.addTask}>Add</a>\r\n                        </div>\r\n                        <ListTask tasks={this.state.tasks} actionRemove={this.removeTask} actionUpdate={this.updateTask}></ListTask>\r\n                    </>\r\n                ) : (\r\n                    <>                    \r\n                        <div className=\"columns newtask\">\r\n                            <input className=\"input\" type=\"text\" placeholder=\"Introduce taréa\" id=\"inputNewTarea\" disabled/>\r\n                            <a className=\"button is-link\" disabled>Add</a>\r\n                        </div>                        \r\n                        <img src=\"https://avatars2.githubusercontent.com/u/39895671?s=400&v=4\" alt=\"logo\" className=\"logo loading\"/>\r\n                    </>\r\n                ) \r\n            \r\n            }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.reloadTask();\r\n\r\n        setInterval(()=>{\r\n            this.reloadTask();\r\n        }, 500)\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport Index from './pages/Index';\nimport TodoList from './pages/TodoList';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <NavBar></NavBar>\n\n        <Switch>\n          <Route path=\"/\" exact component={Index}></Route>\n          <Route path=\"/todoList/\" component={TodoList}></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}