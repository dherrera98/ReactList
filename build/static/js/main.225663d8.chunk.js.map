{"version":3,"sources":["components/NavBar.jsx","pages/Index.jsx","components/ListTask.jsx","pages/TodoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["NavBar","className","role","aria-label","to","exact","src","alt","aria-expanded","data-target","aria-hidden","id","activeClassName","Component","Index","ListTask","props","remove","removeTask","gql","ApolloClient","uri","mutate","mutation","variables","then","res","position","tasks","findIndex","x","action","completed","completedTask","term","taskCompleted","undefined","forEach","task","nowIsCompleted","actionUpdate","this","map","key","name","onClick","createTo","TodoList","addTask","event","state","tarea","client","addTaskQuery","setState","concat","data","insert_tasks","returning","document","getElementById","value","reloadTask","query","result","array","splice","updateTask","newTasks","type","placeholder","onKeyDown","onChange","elem","target","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.225663d8.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {Link, NavLink} from 'react-router-dom'\r\nimport \"bulma/css/bulma.min.css\"\r\n\r\nexport default class NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\r\n                <div className=\"navbar-brand\">\r\n                    <Link className=\"navbar-item\" to=\"/\" exact=\"true\">\r\n                        <img src=\"https://avatars2.githubusercontent.com/u/39895671?s=400&v=4\" alt=\"logo\"/>\r\n                        <h1>TodoList-React</h1>\r\n                    </Link>\r\n\r\n                    <a role=\"button\" className=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                    </a>\r\n                </div>\r\n\r\n                <div id=\"navbarBasicExample\" className=\"navbar-menu\">\r\n                    <div className=\"navbar-start\">\r\n                    <NavLink to=\"/\" exact=\"true\" className=\"navbar-item\" activeClassName=\"activo\">Home</NavLink>\r\n                    <NavLink to=\"/todolist/\" exact=\"true\" className=\"navbar-item\" activeClassName=\"activo\">Todolist</NavLink>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Index extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Index</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport ApolloClient from 'apollo-boost';\r\nimport { gql } from \"apollo-boost\";\r\nimport \"../shared.css\"\r\n\r\n\r\nexport default class ListTask extends Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    remove = (id) => {\r\n        const removeTask = gql`\r\n            mutation delete_tasks($id: Int){\r\n                delete_tasks(where: {id: {_eq: $id}}) {\r\n                    returning {\r\n                    id\r\n                    }\r\n                    }\r\n                }\r\n        `\r\n\r\n        var client = new ApolloClient({\r\n            uri: 'https://todolist-engine.herokuapp.com/v1/graphql',\r\n        });\r\n\r\n        client.mutate({\r\n            mutation: removeTask, \r\n            variables: {\r\n            id\r\n        }}).then(res => {\r\n            const position = this.props.tasks.findIndex(x => x.id === id);\r\n            this.props.action(position)\r\n        })\r\n    }\r\n\r\n    completed = (id) => {\r\n        const completedTask = gql `\r\n        mutation complete_task($term: Boolean, $id: Int){\r\n            update_tasks(where: {id: {_eq: $id}}, _set: {completed: $term}) {\r\n                returning {\r\n                id\r\n                name\r\n                completed\r\n                }\r\n            }\r\n            }\r\n\r\n        `\r\n\r\n        var client = new ApolloClient({\r\n            uri: 'https://todolist-engine.herokuapp.com/v1/graphql',\r\n        });\r\n\r\n\r\n        const nowIsCompleted = (id)=> {\r\n            var taskCompleted = undefined;\r\n\r\n            this.props.tasks.forEach(task => {\r\n                \r\n                if(task.id === id){\r\n                    taskCompleted = task.completed\r\n                }\r\n            });\r\n\r\n            return !taskCompleted;\r\n        }\r\n\r\n\r\n        client.mutate({\r\n            mutation: completedTask,\r\n            variables:{\r\n                id: id,\r\n                term: nowIsCompleted(id)\r\n            }\r\n        }).then(res => {\r\n            const position = this.props.tasks.findIndex(x => x.id === id);\r\n            this.props.actionUpdate(position)\r\n        })\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div className=\"panel list-group columns list-container\">\r\n              {this.props.tasks.map(task=>(\r\n                    <a key={task.id} className=\"panel-block list-group-item is-primary item item_a\">\r\n                        <span className={task.completed ? \"completed\" : \"\"}>\r\n                            {task.name} \r\n                        </span>\r\n\r\n                        <div>\r\n                            {\r\n                                task.completed ?  \r\n                                (<button className=\"button is-info is-outlined is-small\" onClick={() => {this.completed(task.id)}}>Incompleted</button>)\r\n                                :\r\n                                (<button className=\"button is-primary is-outlined is-small\" onClick={() => {this.completed(task.id)}}>Completed</button>)\r\n                            }\r\n\r\n                            <button className=\"button is-danger is-outlined is-small\" onClick={() => {this.remove(task.id)}}>Remove</button>\r\n                        </div>\r\n\r\n                        <span className=\"date\">{task.createTo}</span>\r\n\r\n                    </a>\r\n              ))}\r\n          </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport \"./TodoList.css\"\r\nimport ListTask from '../components/ListTask';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { gql } from \"apollo-boost\";\r\nimport \"../shared.css\"\r\n\r\n\r\n\r\nexport default class TodoList extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            tasks: [],\r\n            tarea: \"\"\r\n        }\r\n    }\r\n\r\n    addTask = event =>{\r\n\r\n        if(this.state.tarea !== \"\"){\r\n            if(event.key === \"Enter\" || event.key === undefined ){\r\n                var client = new ApolloClient({\r\n                    uri: 'https://todolist-engine.herokuapp.com/v1/graphql',\r\n                });\r\n    \r\n                const addTaskQuery = gql `mutation insert_tasks($name: String){\r\n                    insert_tasks(objects: {name: $name}) {\r\n                        returning {\r\n                        id\r\n                        name\r\n                        createTo\r\n                        }\r\n                    }\r\n                    }`\r\n    \r\n                client.mutate({mutation: addTaskQuery,\r\n                     variables:{name: this.state.tarea}})\r\n                     .then(res => {\r\n                        this.setState({\r\n                           tasks: this.state.tasks.concat(res.data.insert_tasks.returning),\r\n                           tarea: \"\"\r\n                        })\r\n    \r\n                        document.getElementById(\"inputNewTarea\").value = \"\"\r\n                        })\r\n            }\r\n        }\r\n    }\r\n\r\n    reloadTask = () => {        \r\n        const client = new ApolloClient({\r\n            uri: 'https://todolist-engine.herokuapp.com/v1/graphql',\r\n          });\r\n\r\n        this.setState({tasks: []})\r\n\r\n        client.query({query: gql`{\r\n            tasks(order_by: {createTo: asc}) {\r\n              id\r\n              name\r\n              completed\r\n              createTo\r\n            }\r\n          }`}).then(result=>{\r\n              this.setState({tasks: this.state.tasks.concat(result.data.tasks)})\r\n            })\r\n    }\r\n\r\n    removeTask = (position) => {\r\n        const array = [...this.state.tasks]\r\n        array.splice(position, 1)\r\n\r\n        this.setState({\r\n            tasks: array\r\n        })\r\n    }\r\n\r\n    updateTask = (position) => {\r\n        let newTasks = [...this.state.tasks]\r\n        newTasks[position].completed = !newTasks[position].completed\r\n\r\n        this.setState({\r\n            tasks: newTasks\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"columns h1-container\">\r\n                    <h1>TodoList</h1>\r\n                </div>\r\n                <div className=\"columns newtask\">\r\n                    <input className=\"input\" type=\"text\" placeholder=\"Introduce taréa\" onKeyDown={this.addTask} id=\"inputNewTarea\" onChange={(elem)=>{this.setState({tarea: elem.target.value})}}/>\r\n                    <a className=\"button is-link\" onClick={this.addTask}>Añadir</a>\r\n                </div>\r\n\r\n                <ListTask tasks={this.state.tasks} action={this.removeTask} actionUpdate={this.updateTask}></ListTask>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.reloadTask();\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport Index from './pages/Index';\nimport TodoList from './pages/TodoList';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <NavBar></NavBar>\n\n        <Switch>\n          <Route path=\"/\" exact component={Index}></Route>\n          <Route path=\"/todoList/\" component={TodoList}></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}